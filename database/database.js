'user strict';

const _ = require('underscore');

/**
 * @fileOverview contains types and functions used to perform queries on the database.
 *
 * @author Gustavo Amaral
 *
 * @requires NPM:pg
 * @requires NPM:joi
 * @requires NPM:./database_queries.js
 */

const { Pool } = require('pg');
const configs = require('../configs.js');
const Joi = require('joi');
const pool = new Pool(configs.pool);
const { createUserTableSQL, 
        deleteUserTableSQL, 
        createSessionTableSQL, 
        addUserSQL,
        getUserSQL,
      } = require('./database_queries.js');

/**
 * Entity used to hold user's data and do the validation of that data
 * when handling the database.
 * @class
 *
 * @constructor
 * @param {number} id user's unique id. Example: 3.
 * @param {string} name user's name. Example: Paulo Costa.
 * @param {string} email user's email. Example: paulo@gmail.com.
 * @param {string} password hashed user's password.
 *
 * @property id user's name. Example: 1.
 * @property name user's name. Example: Gustavo Amaral
 * @property email user's email. Example: almeidaws@outlook.com
 * @property password user's password. This password isn't stored as a plain
 * string, but it's a hash value when storing and retrieving from database.
 */
class User {
    constructor(id, name, email, password) {
        if (_.isString(id)) {
            password = email;
            email = name;
            name = id;
            id = null;
        }

        if (id === undefined) id = null;
            
        this.id = id;
        this.name = name;
        this.email = email;
        this.password = password;
    }

    /**
     * @typedef {Object} ValidationResult
     * @prop {User} value the successful validated user.
     * @prop {Error} error if the user's data is invalid, this property contais the error with
     * the invalid data description.
     */

    /**
     * Checks the the user's fields are valid to be added to the
     * database or not.
     *
     * @returns {ValidationResult}
     */
    validate() {
        const scheme = {
            id: Joi.number().integer().min(1).allow(null),
            name: Joi.string().min(3).max(30).required(),
            email: Joi.string().email().required(),
            password: Joi.string().required()
        };
        return Joi.validate(this, scheme);
    }
}

/** Adds a user of type {@link User} to the data base with an autogenerated
 * number ID for that user.
 *
 * @param {User} user the user to be added to the database persistently.
 * @returns {Promise} the promise's result is an new User with the autogenerated ID.
 */
const addUser = (user) => {
    const { error, validatedUser } = user.validate();
    if (error) return Promise.reject(error);
    
    const addUserConfig = {
        text: addUserSQL,
        values: [user.name, user.email, user.password],
    };

    const promise = pool.query(addUserConfig)
        .then(result => {
            const copy = _.clone(user);
            copy.id = result.rows[0].id;
            return copy;
        });

    return promise;
};

/**
 * Retrieves a new user from the database based on its ID.
 *
 * @param {number} id user's valid id.
 * @returns {Promise} the promise's result is the retrieved result. If there's
 * no user, the promise is rejected.
 */
const getUser = id => {
    const query = {
        text: getUserSQL,
        values: [id],
    }

    const promise = pool.query(query)
        .then(result => {
            if (result.rows.length != 1) {
                const message = "There's no User with ID '" + id + "'.";
                return Promise.reject(new Error(message));  
            }
            
            const user = result.rows[0];
            
            return new User(id, user.name, user.email, user.password);
        });

    return promise;
};

/**
 * @typedef {Object} Connection
 * @property {addUser} addUser used to inserts a new user into database.
 */

/**
 * @typedef {Object} Database
 * @property {User} User class used as entity to handle CRUD related to the user.
 * @property {Connect
 */

/**
 * Establishes a connection to the database that can be used to perform queries.
 * 
 * The returned valued from promise is a {@link Connection}.
 *
 * @returns {Promise} the promise's result is an object with queries that can be used to 
 * communicates with the database.
 */
const connect = () => {
    const queries = {
        addUser,
        getUser,
    };

    const promise = createUserTable()
        .then(unused => createSessionTable())
        .then(unused => queries);

    return promise;
};

const createUserTable = () => pool.query(createUserTableSQL);
const deleteUserTable = () => pool.query(deleteUserTableSQL);
const createSessionTable = () => pool.query(createSessionTableSQL);

/**
 * Exports an object that currently can be used to constructs users and establishes
 * a connection with the database.
 * @module DatabaseModule
 * @exports DatabaseModule
 */
module.exports = { 
    User, 
    connect, 
    DDL: { 
        createUserTable, 
        deleteUserTable,
    },
};

